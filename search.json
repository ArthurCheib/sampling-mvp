[
  {
    "objectID": "sample.html",
    "href": "sample.html",
    "title": "Sample",
    "section": "",
    "text": "## Libraries\nlibrary(shiny)\nlibrary(readxl)\nlibrary(writexl)\nlibrary(leaflet)\n\n### Creating the shiny app\n# User Interface\nui &lt;-  fluidPage(\n    titlePanel(\"GEPD Sampling Tool\"),\n    sidebarLayout(\n      sidebarPanel(\n        tags$p(style = \"text-align: center; font-weight: bold;\", \n       \"Please ensure your file includes the following columns: school_code, lat, long.\"),\n        fileInput(\"file1\", \"Choose CSV/Excel File\",\n                  accept = c(\".csv\", \".xlsx\")),\n        numericInput(\"sample_size\", \"Select Sample Size\", value = 50, min = 50, max = 300),\n        div(style = \"text-align: center;\", actionButton(\"run_sample\", \"Run Sample\")),\n        tags$p(style = \"text-align: center; font-weight: bold;\",\n               \"Download your results here:\"),\n        downloadButton(\"download_data\", \"Download Sampled File\")\n      ),\n      mainPanel(\n        tags$h3(\"Map with the Schools\", style = \"text-align: center;\"),\n        leafletOutput(\"map\", width = \"100%\", height = \"600px\")  # Adjust size as needed\n      )\n    )\n  )\n\nserver = function(input, output, session) {\n    # Reactive value for the uploaded data\n    uploaded_data &lt;- reactiveVal()\n    sampled_data &lt;- reactiveVal()\n\n    # Observe when the file is uploaded and read the data\n    observeEvent(input$file1, {\n        file &lt;- input$file1\n        ext &lt;- tools::file_ext(file$name)\n        if (ext == \"csv\") {\n            data &lt;- read.csv(file$datapath, stringsAsFactors = FALSE)\n        } else if (ext == \"xlsx\") {\n            data &lt;- read_excel(file$datapath)\n        }\n        uploaded_data(data)\n    })\n    \n    # Observe when the 'Run Sample' button is clicked\n    observeEvent(input$run_sample, {\n        # Ensure the sample size does not exceed the number of rows in the data\n        req(uploaded_data())  # Ensure data is uploaded\n        data &lt;- uploaded_data()\n        actual_sample_size &lt;- min(input$sample_size, nrow(data))\n        data$selected &lt;- rep(FALSE, nrow(data))  # Default all to FALSE\n        selected_rows &lt;- sample(nrow(data), actual_sample_size, replace = FALSE)\n        data$selected[selected_rows] &lt;- TRUE\n        sampled_data(data)\n    })\n\n    # Map rendering\n    default_map &lt;- leaflet() %&gt;% \n      addTiles() %&gt;% \n      setView(lng = -51.9253, lat = -14.2350, zoom = 4) \n    \n    output$map &lt;- renderLeaflet({\n      \n        data &lt;- sampled_data()\n        \n        if (is.null(data)) {\n          \n          return(default_map) }\n        \n        else {\n            # Assuming 'lat' and 'long' are the names of the columns\n          map &lt;- leaflet(data) %&gt;% addTiles()\n            \n        }\n            # Check if 'school_name' col exists + use it popup, otherwise use 'school_code'\n            if (\"school_name\" %in% names(data)) {\n                popup_info &lt;- paste(data$school_name, data$school_code, sep=\" - \")\n            } else {\n              # Convert school_code to character if not already\n                popup_info &lt;- as.character(data$school_code)\n            }\n            # Add markers to the map\n            map &lt;- map %&gt;% addCircleMarkers(lng = ~long, lat = ~lat,\n                                            color = ~ifelse(selected, \"red\", \"blue\"),\n                                            popup = ~popup_info)\n            return(map)\n        }\n    )\n\n    # Download handler for the sampled file\n    output$download_data &lt;- downloadHandler(\n        filename = function() {\n            paste(\"sampled_data-\", Sys.Date(), \".xlsx\", sep=\"\")\n        },\n        content = function(file) {\n            data &lt;- sampled_data()\n            if (!is.null(data)) {\n                write_xlsx(data, file)\n            }\n        }\n    )\n}\n\n# Run the app\nshinyApp(ui = ui, server = server)\n\nPhantomJS not found. You can install it with webshot::install_phantomjs(). If it is installed, please make sure the phantomjs executable can be found via the PATH variable.\n\n\nShiny applications not supported in static R Markdown documents"
  },
  {
    "objectID": "tutorial.html",
    "href": "tutorial.html",
    "title": "Tutorial",
    "section": "",
    "text": "This is my tutorial attempt"
  }
]